% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{paintSubTree_removeShift}
\alias{paintSubTree_removeShift}
\title{Remove a Painted Shift from a SIMMAP Tree}
\usage{
paintSubTree_removeShift(tree, shift_node, stem = FALSE)
}
\arguments{
\item{tree}{A phylogenetic tree of class \code{"phylo"} or
\code{c("simmap","phylo")}. The tree must have initialized
\code{$edge.length} and \code{$maps}. If \code{$edge.length} is missing,
it is computed using \code{\link[ape]{compute.brlen}}. If \code{$maps} is
missing, all edges are assumed to be in state \code{"1"}.}

\item{shift_node}{Integer node number indicating where the shift
begins (the clade rooted at this node will be repainted).}

\item{stem}{Logical or numeric. If \code{FALSE} (default), the
incoming edge to \code{shift_node} is left unchanged. If \code{TRUE},
the entire incoming edge is reassigned to the parental state.
If a numeric value in \eqn{[0,1]}, the parent edge is split into
two segments, both labeled with the parental state (effectively
restoring it).}
}
\value{
A modified tree of class \code{c("simmap","phylo")} with updated
\code{$maps} and \code{$mapped.edge}, in which all affected edges are
reassigned to the parent's state.
}
\description{
Selectively removes a previously painted shift (regime) from a clade
descending from \code{shift_node} in a SIMMAP-style phylogenetic tree.
Edges in the clade that match the shift node's state are reassigned to
the ancestral state inherited from the parent node. Optionally, the
stem (incoming edge) can also be restored.
}
\details{
\itemize{
\item The parental state is obtained from
\code{\link[phytools]{getStates}(tree, type = "nodes")} for the parent of
\code{shift_node}. If unavailable, defaults to \code{"1"}.
\item Only edges whose single-segment state matches the
state at \code{shift_node} are overwritten. Other states are preserved.
\item If edges have multiple mapped segments, only exact single-state
matches are considered for replacement.
}
}
\examples{
\dontrun{
  set.seed(1)
  tr <- phytools::pbtree(n = 10, scale = 1)
  # Initialize to global state "0"
  tr0 <- phytools::paintBranches(tr, edge = unique(tr$edge[, 2]),
                                 state = "0", anc.state = "0")
  # Paint a shift (state "1") on an internal clade
  nd <- ape::Ntip(tr0) + 2L
  tr1 <- paintSubTree_mod(tr0, node = nd, state = "1",
                          anc.state = "0", stem = TRUE, overwrite = TRUE)

  # Remove the shift: descendants revert to parental state "0"
  tr2 <- paintSubTree_removeShift(tr1, shift_node = nd, stem = FALSE)
}

}
\seealso{
\code{\link{paintSubTree_mod}},
\code{\link[phytools]{paintSubTree}},
\code{\link[phytools]{getParent}},
\code{\link[phytools]{getDescendants}},
\code{\link[phytools]{getStates}},
\code{\link[ape]{compute.brlen}}
}
